// Code generated by MockGen. DO NOT EDIT.
// Source: Client/client.go

// Package mock_client is a generated GoMock package.
package client

import (
	crypto "crypto"
	rsa "crypto/rsa"
	reflect "reflect"

	ecdh "github.com/aead/ecdh"
	gomock "github.com/golang/mock/gomock"
)

// MockNetworkElement is a mock of NetworkElement interface.
type MockNetworkElement struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkElementMockRecorder
}

// MockNetworkElementMockRecorder is the mock recorder for MockNetworkElement.
type MockNetworkElementMockRecorder struct {
	mock *MockNetworkElement
}

// NewMockNetworkElement creates a new mock instance.
func NewMockNetworkElement(ctrl *gomock.Controller) *MockNetworkElement {
	mock := &MockNetworkElement{ctrl: ctrl}
	mock.recorder = &MockNetworkElementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkElement) EXPECT() *MockNetworkElementMockRecorder {
	return m.recorder
}

// GetAddress mocks base method.
func (m *MockNetworkElement) GetAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockNetworkElementMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockNetworkElement)(nil).GetAddress))
}

// Register mocks base method.
func (m *MockNetworkElement) Register(element NetworkElement) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", element)
}

// Register indicates an expected call of Register.
func (mr *MockNetworkElementMockRecorder) Register(element interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockNetworkElement)(nil).Register), element)
}

// Respond mocks base method.
func (m *MockNetworkElement) Respond(message Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Respond", message)
}

// Respond indicates an expected call of Respond.
func (mr *MockNetworkElementMockRecorder) Respond(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Respond", reflect.TypeOf((*MockNetworkElement)(nil).Respond), message)
}

// SetExchangeObject mocks base method.
func (m *MockNetworkElement) SetExchangeObject(object ExchangeObject, element NetworkElement) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetExchangeObject", object, element)
}

// SetExchangeObject indicates an expected call of SetExchangeObject.
func (mr *MockNetworkElementMockRecorder) SetExchangeObject(object, element interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetExchangeObject", reflect.TypeOf((*MockNetworkElement)(nil).SetExchangeObject), object, element)
}

// SetPublicKey mocks base method.
func (m *MockNetworkElement) SetPublicKey(key rsa.PublicKey, element NetworkElement) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPublicKey", key, element)
}

// SetPublicKey indicates an expected call of SetPublicKey.
func (mr *MockNetworkElementMockRecorder) SetPublicKey(key, element interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPublicKey", reflect.TypeOf((*MockNetworkElement)(nil).SetPublicKey), key, element)
}

// keyExchangeI mocks base method.
func (m *MockNetworkElement) keyExchangeI(c NetworkElement, curve ecdh.KeyExchange, key crypto.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "keyExchangeI", c, curve, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// keyExchangeI indicates an expected call of keyExchangeI.
func (mr *MockNetworkElementMockRecorder) keyExchangeI(c, curve, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "keyExchangeI", reflect.TypeOf((*MockNetworkElement)(nil).keyExchangeI), c, curve, key)
}

// keyExchangeII mocks base method.
func (m *MockNetworkElement) keyExchangeII(c NetworkElement, exchange ecdh.KeyExchange, key crypto.PublicKey) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "keyExchangeII", c, exchange, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// keyExchangeII indicates an expected call of keyExchangeII.
func (mr *MockNetworkElementMockRecorder) keyExchangeII(c, exchange, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "keyExchangeII", reflect.TypeOf((*MockNetworkElement)(nil).keyExchangeII), c, exchange, key)
}

// keyExchangeIII mocks base method.
func (m *MockNetworkElement) keyExchangeIII(c NetworkElement, ciphertext []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "keyExchangeIII", c, ciphertext)
}

// keyExchangeIII indicates an expected call of keyExchangeIII.
func (mr *MockNetworkElementMockRecorder) keyExchangeIII(c, ciphertext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "keyExchangeIII", reflect.TypeOf((*MockNetworkElement)(nil).keyExchangeIII), c, ciphertext)
}

// keyExchangeIV mocks base method.
func (m *MockNetworkElement) keyExchangeIV(c NetworkElement, ciphertext []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "keyExchangeIV", c, ciphertext)
}

// keyExchangeIV indicates an expected call of keyExchangeIV.
func (mr *MockNetworkElementMockRecorder) keyExchangeIV(c, ciphertext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "keyExchangeIV", reflect.TypeOf((*MockNetworkElement)(nil).keyExchangeIV), c, ciphertext)
}
