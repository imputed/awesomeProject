// Code generated by MockGen. DO NOT EDIT.
// Source: Client/client.go

// Package mock_Client is a generated GoMock package.
package mock_Client

import (
	Client "DHE/Client"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNetworkElement is a mock of NetworkElement interface.
type MockNetworkElement struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkElementMockRecorder
}

// MockNetworkElementMockRecorder is the mock recorder for MockNetworkElement.
type MockNetworkElementMockRecorder struct {
	mock *MockNetworkElement
}

// NewMockNetworkElement creates a new mock instance.
func NewMockNetworkElement(ctrl *gomock.Controller) *MockNetworkElement {
	mock := &MockNetworkElement{ctrl: ctrl}
	mock.recorder = &MockNetworkElementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkElement) EXPECT() *MockNetworkElementMockRecorder {
	return m.recorder
}

// GetAddress mocks base method.
func (m *MockNetworkElement) GetAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockNetworkElementMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockNetworkElement)(nil).GetAddress))
}

// Register mocks base method.
func (m *MockNetworkElement) Register(element Client.NetworkElement) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", element)
}

// Register indicates an expected call of Register.
func (mr *MockNetworkElementMockRecorder) Register(element interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockNetworkElement)(nil).Register), element)
}

// Respond mocks base method.
func (m *MockNetworkElement) Respond(message Client.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Respond", message)
}

// Respond indicates an expected call of Respond.
func (mr *MockNetworkElementMockRecorder) Respond(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Respond", reflect.TypeOf((*MockNetworkElement)(nil).Respond), message)
}
